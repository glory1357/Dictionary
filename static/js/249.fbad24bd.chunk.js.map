{"version":3,"file":"static/js/249.fbad24bd.chunk.js","mappings":"yJAuBA,UAlBA,YAAkC,IAAfA,EAAc,EAAdA,WACjB,OACE,4BACE,gBAAKC,IAAKC,EAAKC,MAAO,CAAEC,QAAS,QAASC,OAAQ,UAAYC,IAAI,eAClE,cAAGH,MAAO,CAAEI,UAAW,SAAUC,WAAY,OAAQC,SAAU,QAA/D,iCACA,SAAC,KAAD,CACEC,QAAS,kBAAMV,KACfG,MAAO,CACLC,QAAS,QAASO,eAAgB,YAAaJ,UAAW,SAAUC,WAAY,OAAQC,SAAU,OAAQG,UAAW,QAEvHC,GAAG,cALL,oC,0ICmEN,MAzEA,YAAwC,IAArBC,EAAoB,EAApBA,KAAMd,EAAc,EAAdA,WACfe,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,UAAWC,EAAaH,EAAbG,SAEnBC,EAAmBF,EAAUG,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACrC,4BACE,uBACGD,IAEFC,GAAQ,kBAAOpB,IAAKoB,EAAOC,UAAQ,EAA3B,UAA4B,kBAAOC,KAAK,eAAwB,QAJjEC,EAAAA,EAAAA,UAQNC,EAAkBR,EAASE,KAAI,YAAoC,IAAjCO,EAAgC,EAAhCA,aACtC,EADsE,EAAlBC,YAGpC,GADdC,EADF,EACEA,WAAYC,EADd,EACcA,QAASC,EADvB,EACuBA,SAAUC,EADjC,EACiCA,SAEjC,OACE,iBAAoBC,UAAU,+BAA9B,WACE,2CAEE,0BACGN,QAGL,yCACCE,GACC,4BACE,0CACA,uBAAIA,OAEJ,KACHC,GACC,4BACE,sCACA,uBAAIA,OAEJ,KACHC,EAASG,QACR,4BACE,uCACA,wBAAKH,EAASX,KAAI,SAACe,GAAD,OAAU,wBAAoBA,IAAXV,EAAAA,EAAAA,eAErC,KACHO,EAASE,QACR,4BACE,uCACA,wBAAKF,EAASZ,KAAI,SAACe,GAAD,OAAU,wBAAoBA,IAAXV,EAAAA,EAAAA,eAErC,QA/BIA,EAAAA,EAAAA,UAoCd,OACE,4BACE,SAAC,KAAD,CAAMX,GAAG,cAAcH,QAAS,kBAAMV,KAAcgC,UAAU,kCAA9D,UACE,gBAAKA,UAAU,QAAf,wEAEF,wBAAKjB,KACL,mBACA,iBAAKiB,UAAU,YAAf,WACE,uCACCd,MAEH,mBACA,iBAAKc,UAAU,WAAf,WACE,uCACA,gBAAKA,UAAU,mBAAf,SAAmCP,W,8BC1B3C,MAhCA,WACE,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,QAAQC,IAAIH,GACZ,IAAMI,GAAWC,EAAAA,EAAAA,MACjB,GAAuDC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,KAAtEC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,kBAAmBC,EAArC,EAAqCA,eAErCC,EAAAA,EAAAA,YAAU,WACHH,EAAS5B,MACZwB,GAASQ,EAAAA,EAAAA,IAAUZ,MAEpB,IAEH,IAAMnC,EAAa,WACjBuC,GAASS,EAAAA,EAAAA,QAGX,OAAIJ,GACK,SAACK,EAAA,EAAD,IAGa,MAAlBJ,GACK,SAAC,UAAD,IAELA,GACK,SAACK,EAAA,EAAD,CAAclD,WAAYA,IAIjC2C,EAAS5B,MAAO,SAAC,EAAD,CAASD,KAAM6B,EAAU3C,WAAYA,IAAiB,O","sources":["components/404/404.js","components/resultPage/ContentResultPage.js","components/resultPage/ResultPage.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport img from './notFound.png';\n\nfunction Page404({ clearStore }) {\n  return (\n    <div>\n      <img src={img} style={{ display: 'block', margin: '0 auto' }} alt=\"not found\" />\n      <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '24px' }}>Page doesn&#39;t exist</p>\n      <Link\n        onClick={() => clearStore()}\n        style={{\n          display: 'block', textDecoration: 'underline', textAlign: 'center', fontWeight: 'bold', fontSize: '24px', marginTop: '30px',\n        }}\n        to=\"/dictionary\"\n      >\n        Back to main page\n      </Link>\n    </div>\n  );\n}\n\nexport default Page404;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { nanoid } from '@reduxjs/toolkit';\n\nfunction Content({ data, clearStore }) {\n  const { word, phonetics, meanings } = data;\n\n  const contentPhonetics = phonetics.map(({ text, audio }) => (\n    <div key={nanoid()}>\n      <p>\n        {text}\n      </p>\n      {audio ? <audio src={audio} controls><track kind=\"captions\" /></audio> : null}\n    </div>\n  ));\n\n  const contentMeanings = meanings.map(({ partOfSpeech, definitions }) => {\n    const {\n      definition, example, synonyms, antonyms,\n    } = definitions[0];\n    return (\n      <div key={nanoid()} className=\"meanings-wrapper-definitions\">\n        <h4>\n          PartOfSpeech:\n          <span>\n            {partOfSpeech}\n          </span>\n        </h4>\n        <h4>Definitions:</h4>\n        {definition ? (\n          <div>\n            <h5>definition: </h5>\n            <p>{definition}</p>\n          </div>\n        ) : null}\n        {example ? (\n          <div>\n            <h5>example:</h5>\n            <p>{example}</p>\n          </div>\n        ) : null}\n        {synonyms.length ? (\n          <div>\n            <h5>synonyms:</h5>\n            <ul>{synonyms.map((elem) => <li key={nanoid()}>{elem}</li>)}</ul>\n          </div>\n        ) : null}\n        {antonyms.length ? (\n          <div>\n            <h5>antonyms:</h5>\n            <ul>{antonyms.map((elem) => <li key={nanoid()}>{elem}</li>)}</ul>\n          </div>\n        ) : null}\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <Link to=\"/dictionary\" onClick={() => clearStore()} className=\"button button__secondary_result\">\n        <div className=\"inner\">На главную</div>\n      </Link>\n      <h2>{word}</h2>\n      <hr />\n      <div className=\"phonetics\">\n        <h3>Phonetics:</h3>\n        {contentPhonetics}\n      </div>\n      <hr />\n      <div className=\"meanings\">\n        <h3>Meanings:</h3>\n        <div className=\"meanings-wrapper\">{contentMeanings}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Content;\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchWord, storeClear } from '../../actions/index';\nimport Content from './ContentResultPage';\nimport Spinner from '../spinner/Spinner';\nimport Page404 from '../404/404';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './resultPage.scss';\nimport './resultPageMedia.scss';\n\nfunction ResultPage() {\n  const { wordKey } = useParams();\n  console.log(wordKey);\n  const dispatch = useDispatch();\n  const { dataWord, wordLoadingStatus, fetchingError } = useSelector((state) => state);\n\n  useEffect(() => {\n    if (!dataWord.word) {\n      dispatch(fetchWord(wordKey));\n    }\n  }, []);\n\n  const clearStore = () => {\n    dispatch(storeClear());\n  };\n\n  if (wordLoadingStatus) {\n    return <Spinner />;\n  }\n\n  if (fetchingError === 404) {\n    return <Page404 />;\n  }\n  if (fetchingError) {\n    return <ErrorMessage clearStore={clearStore} />;\n  }\n\n  return (\n    dataWord.word ? <Content data={dataWord} clearStore={clearStore} /> : null\n  );\n}\n\nexport default ResultPage;\n"],"names":["clearStore","src","img","style","display","margin","alt","textAlign","fontWeight","fontSize","onClick","textDecoration","marginTop","to","data","word","phonetics","meanings","contentPhonetics","map","text","audio","controls","kind","nanoid","contentMeanings","partOfSpeech","definitions","definition","example","synonyms","antonyms","className","length","elem","wordKey","useParams","console","log","dispatch","useDispatch","useSelector","state","dataWord","wordLoadingStatus","fetchingError","useEffect","fetchWord","storeClear","Spinner","ErrorMessage"],"sourceRoot":""}